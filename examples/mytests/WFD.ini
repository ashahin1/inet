[General]
network = inet.examples.mytests.WFDNetwork
description = Wi-Fi Direct Simulation
cmdenv-express-mode = true
cmdenv-output-file = ${resultdir}/${configname}-${iterationvarsf}#${repetition}.out
cmdenv-status-frequency = 10s
parallel-simulation = false
sim-time-limit = 20min

**.param-record-as-scalar = false
**.vector-recording = false
**.statistic-recording = false
**.scalar-recording = false

# random
num-rngs = 3
**.vector-recording-intervals = 
*.device[*].mobility.rng-0 = 1
*.device[*].wlan[*].mac.rng-0 = 2

#Basic Config
*.deviceCount = 20
*.configurator.config = xml("<config><interface hosts='**' names='wlan0' address='1.x.x.x' netmask='255.0.0.0' add-static-route='false' add-default-route='false' add-subnet-route='false'/><interface hosts='**' names='wlan1' address='192.x.x.x' netmask='255.x.x.x' add-static-route='false' add-default-route='false' add-subnet-route='false'/></config>")
*.configurator.addDefaultRoutes = false
*.configurator.addStaticRoutes = false
*.configurator.addSubnetRoutes = false
**.hasStatus = true
#**.scenarioManager.script = xmldoc("scenario.xml")

# mobility
#-------------------
#**.device*.mobilityType = "MassMobility"
#**.device*.mobility.initFromDisplayString = false
#**.device*.mobility.changeInterval = truncnormal(2s, 0.5s)
#**.device*.mobility.changeAngleBy = normal(0deg, 30deg)
#**.device*.mobility.speed = truncnormal(20mps, 8mps)
#**.device*.mobility.updateInterval = 100ms

#**.device*.mobilityType = "StaticGridMobility"
#**.device*.mobility.numHosts = 5
#**.device*.mobility.marginX = 50m
#**.device*.mobility.marginY = 50m

#Deployment Area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 2000m
**.constraintAreaMaxY = 2000m
**.constraintAreaMaxZ = 0m

# wireless configuration
**.wlan[*].bitrate = 54Mbps
#**.wlan[*].agent.startingTime = 5s
**.wlan[*].agent.activeScan = true
#**.wlan[*].agent.default_ssid = "DIRECT-XXXXXXXX"
**.wlan[*].agent.channelsToScan = ""  # "" means all
#**.wlan[*].agent.probeDelay = 2s
**.wlan[*].agent.minChannelTime = 0.15s
**.wlan[*].agent.maxChannelTime = 0.3s
**.wlan[*].agent.authenticationTimeout = 5s
**.wlan[*].agent.associationTimeout = 5s

#Radio&MAC
#*.mediumType = "Ieee80211RadioMedium"
#*.device*.wlan[*].radioType = "Ieee80211IdealRadio"
#*.radioMedium.analogModelType = "ScalarAnalogModel"
#*.radioMedium.backgroundNoiseType = "IsotropicScalarBackgroundNoise"
#*.device*.wlan[*].typename = "IdealWirelessNic"
#*.device*.wlan[*].mac.useAck = false
#*.device*.wlan[*].mac.fullDuplex = false
#*.mediumType = "Ieee80211DimensionalRadioMedium"
#*.device*.wlan[*].radioType = "Ieee80211DimensionalRadio"
*.device*.wlan[*].radio.transmitter.power = 0.8mW
#*.device*.wlan[*].radio.transmitter.communicationRange = 200m
#*.device*.wlan[*].radio.receiver.ignoreInterference = true
*.device*.wlan[0].radio.displayCommunicationRange = true
#*.device*.wlan[*].radio.displayInterferenceRange = true

#Power Config
*.device*.wlan[*].radio.energyConsumerType = "StateBasedEnergyConsumer"
*.device*.wlan[*].radio.energyConsumer.offPowerConsumption = 0mW
*.device*.wlan[*].radio.energyConsumer.sleepPowerConsumption = 1mW
*.device*.wlan[*].radio.energyConsumer.switchingPowerConsumption = 1mW
*.device*.wlan[*].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.device*.wlan[*].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.device*.wlan[*].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
#*.device*.wlan[*].radio.energyConsumer transmitterIdlePowerConsumption = 2mW
*.device*.wlan[*].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW

#Battery
*.device*.energyStorageType = "SimpleEnergyStorage"
*.device*.energyStorage.nominalCapacity = 8000J
*.device*.energyStorage.initialCapacity = uniform(0.5 *  this.nominalCapacity, this.nominalCapacity)

#*.device*.energyGeneratorType = "AlternatingEnergyGenerator"
#*.device*.energyGenerator.powerGeneration = 1mW
#*.device*.energyGenerator.sleepInterval = exponential(100s)
#*.device*.energyGenerator.generationInterval = exponential(100s)

#Protocol Parameters
*.sendInterval = 5s
*.declareGoPeriod = this.sendInterval * 2
*.selectGoPeriod = this.declareGoPeriod
*.switchDhcpPeriod = this.sendInterval * 2
*.tearDownPeriod = this.switchDhcpPeriod * 5

#UDP Apps
**.numUdpApps = 3
# UDPWFDServiceDiscovery -- Main protocol app
**.udpApp[0].typename = "UDPWFDServiceDiscovery"
**.udpApp[0].messageLength = 100B
**.udpApp[0].startTime = uniform(0ms, 500ms)

# DHCP client for devices running as GMs/PMs (bound to wlan2 for GMs and is switched wlan3 in case of PMs)
**.udpApp[1].typename = "DHCPClient"
**.udpApp[1].interface = "wlan2"
**.udpApp[1].startTime = 2s

# DHCP server for devices running as GOs (bound to interface wlan1) 
**.udpApp[2].typename = "DHCPServer"
**.udpApp[2].interface = "wlan1"
**.udpApp[2].startTime = 2s
**.udpApp[2].subnetMask = "255.255.255.0"
**.udpApp[2].ipAddressStart = "192.168.0.10"
**.udpApp[2].maxNumClients = 100
**.udpApp[2].gateway = "192.168.0.1"
**.udpApp[2].dns = "192.168.0.1"
**.udpApp[2].leaseTime = 200s

#TCP Apps
**.numTcpApps = 2
**.tcpApp[0].typename = "TCPMgmtSrvApp"

**.tcpApp[1].typename = "TCPMgmtClientApp"

##Avialable protocols, for comparison purposes (default is ISP--EMC_TWO_HOP--MUNKRES)
#------------------------------------------------------------------------------------
#**.udpApp[0].subnetProposalType = "ISNP"
#**.udpApp[0].subnetProposalType = "NO_CONFLICT_DETECTION"
#**.udpApp[0].goDeclarationMethod = "EMC"
#**.udpApp[0].goDeclarationMethod = "EMC_TWO_HOP"
#**.udpApp[0].goDeclarationMethod = "RANDOM"
#**.tcpApp[0].proxyAssignmentType = "MUNKRES"
#**.tcpApp[0].proxyAssignmentType = "FIRST_AVAILABLE"
#**.tcpApp[0].proxyAssignmentType = "RANDOM"

#========================================================================================================================
[Config ADS_Test]
description = "Tesing ADS protocol for dissiminating alerts"

*.deviceCount = ${N=5..50 step 5}
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.device*.mobilityType = "StaticGridMobility"
#**.device*.mobility.numHosts = ${N}
**.udpApp[0].startTime = uniform(0ms, 500ms)
*.sendInterval = 5s
*.declareGoPeriod = this.sendInterval * 2
*.selectGoPeriod = this.declareGoPeriod
*.switchDhcpPeriod = this.sendInterval * 2
*.tearDownPeriod = this.switchDhcpPeriod * 5


#========================================================================================================================
[Config Subnet_Conflict_Test]
description = "Testing the no of detected conflicts in proposed subnet during negotiation and also testing the no of conflicts in the final assigned subnets of GOs"

sim-time-limit = 7s

**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true

*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true


*.wfdHostType = "WFDHostSD"
*.deviceCount = ${N=100..2000 step 100}
**.device*.mobilityType = ${Layout="StaticGridMobility", "LinearNodeDistributionMobility"}
#**.device*.mobilityType = "StaticGridMobility"
#**.device*.mobilityType = "StaticConcentricMobility"
#**.device*.mobilityType = "LinearNodeDistributionMobility"
**.device*.mobility.separation = 0m
#**.device*.mobility.numHosts = 50
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
*.device*.wlan[*].radio.transmitter.power = 0.8mW


**.numTcpApps = 0
**.numUdpApps = 1
**.udpApp[0].typename = "UDPWFDServiceDiscovery"
**.udpApp[0].messageLength = 100B
**.udpApp[0].startTime = uniform(0ms, 500ms)
**.udpApp[0].apInterface = ""
**.udpApp[0].groupInterface = ""
**.udpApp[0].proxyInterface = ""

*.sendInterval = 2s
*.declareGoPeriod = this.sendInterval * 3

**.udpApp[0].subnetProposalType = "NO_CONFLICT_DETECTION"

#========================================================================================================================
[Config Connectivity_Test]
description = "Testing the connectivty of the resulting network"

sim-time-limit =  1min#16s #2s + (this.declareGoPeriod) + (this.selectGoPeriod) + (this.switchDhcpPeriod)

#Record group statistics
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption
**.energyStorage.*.vector-recording = true
**.energyStorage.*.scalar-recording = true
**.energyStorage.*.statistic-recording = true
#
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#record parameters for reference
**.energyStorage.*.param-record-as-scalar = true
**.udpApp[0].*.param-record-as-scalar = true
**.tcpApp[0].*.param-record-as-scalar = true
**.tcpApp[1].*.param-record-as-scalar = true

#**Error*.vector-recording = true
#**Error*.scalar-recording = true
#**Error*.statistic-recording = true

*.wfdHostType = "WFDHostFull_NoProxy"
**.udpApp[0].proxyInterface = ""

#*.deviceCount = 50
*.deviceCount = ${N=5..100 step 5}
#**.device*.mobilityType = ${Layout="StaticGridMobility", "LinearNodeDistributionMobility"}

**.device*.mobilityType = "StaticGridMobility"
#**.device*.mobilityType = "StaticConcentricMobility"
#**.device*.mobilityType = "LinearNodeDistributionMobility"
**.device*.mobility.separation = 0m
**.constraintAreaMaxX = 200m
**.constraintAreaMaxY = 200m
*.device*.wlan[*].radio.transmitter.power = 0.9mW #This gives more realistic range

*.sendInterval = 2s
*.declareGoPeriod = this.sendInterval * 3 	#6s
*.selectGoPeriod = this.sendInterval * 2 	#4s
*.switchDhcpPeriod = this.selectGoPeriod 	#4s
*.tearDownPeriod = this.selectGoPeriod	 	#4s

*.device*.energyStorage.nominalCapacity = 1J
*.device*.energyStorage.nodeShutdownCapacity = 0J

**.udpApp[1].startTime = 5s #DHCP Server
**.udpApp[2].startTime = 7s #DHCP Client
**.tcpApp[1].startTime = 7s #TCPMgmtClient
**.tcpApp[1].numRequestsPerSession = 2

##Avialable protocols, for comparison purposes (default is ISP--EMC_TWO_HOP--MUNKRES)
#------------------------------------------------------------------------------------
#**.udpApp[0].subnetProposalType = "ISNP"
#**.udpApp[0].subnetProposalType = "NO_CONFLICT_DETECTION"
#**.udpApp[0].goDeclarationMethod = "EMC"
#**.udpApp[0].goDeclarationMethod = "EMC_TWO_HOP"
#**.udpApp[0].goDeclarationMethod = "RANDOM"
#**.tcpApp[0].proxyAssignmentType = "MUNKRES"
#**.tcpApp[0].proxyAssignmentType = "FIRST_AVAILABLE"
#**.tcpApp[0].proxyAssignmentType = "RANDOM"


