[General]
network = inet.examples.mytests.WFDNetwork
description = Wi-Fi Direct Simulation
cmdenv-express-mode = true
cmdenv-status-frequency = 10s
sim-time-limit = 1min

repeat = 30
seed-set = ${repetition}

#Set number of protocol runs
*.groupStatistics.numRunsToEndSim = 1 #End after the first Teardown event, no rerun

#Disable all recordings by default
**.param-record-as-scalar = false
**.vector-recording = false
**.statistic-recording = false
**.scalar-recording = false

# random
num-rngs = 3
*.device[*].mobility.rng-0 = 1
*.device[*].wlan[*].mac.rng-0 = 2

#Interfaces and Rounting tables. We need this to be able to start using the wlans that we have.
#For wlan0, the values assigned from here are sufficient and guarntee that they can send servcie discovery messages.
#For wlan1, we will redefine the values given from here once we reach the time for using it. We just need to have some initial values for the dhcp server app to be able to initialize
*.configurator.config = xml("<config><interface hosts='**' names='wlan0' address='1.x.x.x' netmask='255.0.0.0' add-static-route='false' add-default-route='false' add-subnet-route='false'/><interface hosts='**' names='wlan1' address='192.x.x.x' netmask='255.255.255.0' add-static-route='false' add-default-route='false' add-subnet-route='false'/></config>")
*.configurator.addDefaultRoutes = false
*.configurator.addStaticRoutes = false
*.configurator.addSubnetRoutes = false
**.hasStatus = true

#Deployment Area
*.deviceCount = 100
#**.device*.mobilityType = "StaticGridMobility"
**.device*.mobilityType = ${Layout="StaticGridMobility", "StationaryConnectedGraphMobility"}
**.device*.mobility.txPowerRange = 150m #Needed for StationaryConnectedGraphMobility
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 0m

# wireless configuration (Radio&MAC)
**.wlan[*].bitrate = 54Mbps #802.11g
**.wlan[*].agent.activeScan = true
**.wlan[*].mgmt.beaconInterval = 1000s #We are using active scanning, so no need for frequent beacons. This will enhance the simulation run time and also reduce the chance of interfernce from too many beacons.
*.device*.wlan[*].radio.transmitter.power = 0.9mW # A range of nearly 150m, which suits the 802.11g  
*.device*.wlan[0].radio.displayCommunicationRange = true

#Power Config
*.device*.wlan[*].radio.energyConsumerType = "StateBasedEpEnergyConsumer"
*.device*.wlan[*].radio.energyConsumer.offPowerConsumption = 0mW
*.device*.wlan[*].radio.energyConsumer.sleepPowerConsumption = 1mW
*.device*.wlan[*].radio.energyConsumer.switchingPowerConsumption = 1mW
*.device*.wlan[*].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.device*.wlan[*].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.device*.wlan[*].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.device*.wlan[*].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW

#Battery
**.clipBoard.maxBatteryCapacity = 5
*.device*.energyStorageType = "SimpleEpEnergyStorage"
*.device*.energyStorage.nominalCapacity = 5J
*.device*.energyStorage.initialCapacity = uniform(0.5 *  this.nominalCapacity, this.nominalCapacity)
*.device*.energyManagementType = "SimpleEpEnergyManagement"

#UDP Apps
**.numUdpApps = 3
# UDPWFDServiceDiscovery -- Main protocol app
**.udpApp[0].typename = "UDPWFDServiceDiscovery"
**.udpApp[0].messageLength = 100B
**.udpApp[0].startTime = uniform(0ms, 500ms)

# DHCP client for devices running as GMs/PMs (bound to wlan2 for GMs and is switched wlan3 in case of PMs)
**.udpApp[1].typename = "DHCPClient"
**.udpApp[1].interface = "wlan2"

# DHCP server for devices running as GOs (bound to interface wlan1) 
**.udpApp[2].typename = "DHCPServer"
**.udpApp[2].interface = "wlan1"
**.udpApp[2].maxNumClients = 250
**.udpApp[2].numReservedAddresses = 2
**.udpApp[2].leaseTime = 200s

#TCP Apps
**.numTcpApps = 2
**.tcpApp[0].typename = "TCPMgmtSrvApp"
**.tcpApp[1].typename = "TCPMgmtClientApp"

#Device Config (Use the device version with no proxy support to reduce memory and messages overhead)
*.wfdHostType = "WFDHostFull_NoProxy"
**.udpApp[0].proxyInterface = ""

#Protocol Parameters (for now).
*.sendInterval = 1s
*.declareGoPeriod = 4s
*.selectGoPeriod = 2s
*.switchDhcpPeriod = 4s
*.tearDownPeriod = 1ms
**.maxSubnetX = 254
**.maxSubnetY = 254
**.tcpApp[1].numRequestsPerSession = 3
**.tcpApp[1].thinkTime = 1s
**.tcpApp[*].hb_ttl = 30
**.tcpApp[*].decTtlPeriod = 1s

#Starting Times (for now). Starting apps early will cause overhead and may be some unexpected errors
**.wlan[2].agent.startingTime = 1000s #large number to avoid starting it by itself. We will start it when needed by changing the default_ssid 
**.udpApp[1].startTime = (4s + 2s - 2s)	#DHCP Client (declareGoPeriod + selectGoPeriod - 2) should be ready by the time a device becomes a GM
**.udpApp[2].startTime = (4s + 2s - 1s)	#DHCP Server (declareGoPeriod + selectGoPeriod - 1) should be ready before GMs starts to ask for IP addresses
**.tcpApp[1].startTime = (4s + 2s)		#TCPMgmtClient (declareGoPeriod + selectGoPeriod) should by ready by the time the device becomes a GM

#========================================================================================================================
[Config TxPower]

*.device*.wlan[*].radio.transmitter.power = ${TxPower = 0.2..1.0 step 0.1}mW 

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config PathLoss]

*.radioMedium.pathLossType = ${Pathloss="FreeSpacePathLoss", "LogNormalShadowing", "RayleighFading"}

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config SendInterval]

*.sendInterval = ${SendInterval = 0.1..1 step 0.1}s

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config DeclareGoPeriod]

*.declareGoPeriod = ${DeclareGoPeriod = 2..10 step 1}s

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config SwitchDhcpPeriod]

**.tcpApp[1].switchDhcpPeriod = ${SwitchDhcpPeriod = 4..19 step 3}s

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config NumRequestsPerSession]

**.tcpApp[1].numRequestsPerSession = ${NumRequestsPerSession = 1..5 step 1}

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config ThinkTime]

**.tcpApp[1].thinkTime = ${ThinkTime = 0.1..1 step 0.1}s

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config DecTtlPeriod]

**.tcpApp[*].decTtlPeriod = ${DecTtlPeriod = 0.1..1 step 0.1}s

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config HbTtl]

**.tcpApp[*].hb_ttl = ${HbTtl = 5..30 step 5}

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config MaxSubnet]

**.maxSubnetX = ${MaxSubnet = 10..250 step 15, 254}
**.maxSubnetY = ${$MaxSubnet}

#*.deviceCount = 100
#**.constraintAreaMaxX = 1000m
#**.constraintAreaMaxY = 1000m

*.wfdHostType = "WFDHostSD"
**.numTcpApps = 0
**.numUdpApps = 1
**.udpApp[0].typename = "UDPWFDServiceDiscovery"
**.udpApp[0].messageLength = 100B
**.udpApp[0].startTime = uniform(0ms, 500ms)
**.udpApp[0].apInterface = ""
**.udpApp[0].groupInterface = ""
**.udpApp[0].proxyInterface = ""

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true

#========================================================================================================================
[Config Mobility]

sim-time-limit = 10min
*.groupStatistics.numRunsToEndSim = 30 

**.device*.mobilityType = "MassMobility"
**.device*.mobility.initFromDisplayString = false
**.device*.mobility.changeInterval = truncnormal(2s, 0.5s)
**.device*.mobility.changeAngleBy = normal(0deg, 30deg)
**.device*.mobility.speed = truncnormal(20mps, 8mps)
**.device*.mobility.updateInterval = 100ms

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true

#========================================================================================================================
[Config ProtocolRuns]

sim-time-limit = 10min
*.groupStatistics.numRunsToEndSim = 30

#Let's define now what we want to record
**.result-recording-modes = default #Exclude the un-needed vectors, they consume a alot of space (14GB/hour)!!!
#Record group statistics (Counts, totals, Avgs)
*.groupStatistics.*.vector-recording = true
*.groupStatistics.*.scalar-recording = true
*.groupStatistics.*.statistic-recording = true
#Record power consumption (individual per each device)
**.energyStorage.**.vector-recording = true
**.energyStorage.**.scalar-recording = true
**.energyStorage.**.statistic-recording = true
#Record Udp Apps (individual per each device)
**.udpApp[0].*.vector-recording = true
**.udpApp[0].*.scalar-recording = true
**.udpApp[0].*.statistic-recording = true
#Record Tcp Apps (individual per each device)
**.tcpApp[*].*.vector-recording = true
**.tcpApp[*].*.scalar-recording = true
**.tcpApp[*].*.statistic-recording = true