/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
#line 1 "parser.y" /* yacc.c:339  */

/*
 * Copyright 2013 Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
/*
 * Author: Author: ncardwell@google.com (Neal Cardwell)
 *
 * This is the parser for the packetdrill script language. It is
 * processed by the bison parser generator.
 *
 * For full documentation see: http://www.gnu.org/software/bison/manual/
 *
 * Here is a quick and dirty tutorial on bison:
 *
 * A bison parser specification is basically a BNF grammar for the
 * language you are parsing. Each rule specifies a nonterminal symbol
 * on the left-hand side and a sequence of terminal symbols (lexical
 * tokens) and or nonterminal symbols on the right-hand side that can
 * "reduce" to the symbol on the left hand side. When the parser sees
 * the sequence of symbols on the right where it "wants" to see a
 * nonterminal on the left, the rule fires, executing the semantic
 * action code in curly {} braces as it reduces the right hand side to
 * the left hand side.
 *
 * The semantic action code for a rule produces an output, which it
 * can reference using the $$ token. The set of possible types
 * returned in output expressions is given in the %union section of
 * the .y file. The specific type of the output for a terminal or
 * nonterminal symbol (corresponding to a field in the %union) is
 * given by the %type directive in the .y file. The action code can
 * access the outputs of the symbols on the right hand side by using
 * the notation $1 for the first symbol, $2 for the second symbol, and
 * so on.
 *
 * The lexer (generated by flex from lexer.l) feeds a stream of
 * terminal symbols up to this parser. Parser semantic actions can
 * access the lexer output for a terminal symbol with the same
 * notation they use for nonterminals.
 *
 */

/* The first part of the .y file consists of C code that bison copies
 * directly into the top of the .c file it generates.
 */

#include "inet/common/INETDefs.h"

#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
#include <arpa/inet.h>
#endif
#include <stdio.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "PacketDrillUtils.h"
#include "PacketDrill.h"


/* This include of the bison-generated .h file must go last so that we
 * can first include all of the declarations on which it depends.
 */
#include "parser.h"

/* Change this YYDEBUG to 1 to get verbose debug output for parsing: */
#define YYDEBUG 0
#if YYDEBUG
extern int yydebug;
#endif

extern FILE *yyin;
extern int yylineno;
extern int yywrap(void);
extern char *yytext;
extern int yylex(void);
extern int yyparse(void);

/* The input to the parser: the path name of the script file to parse. */
static const char* current_script_path = NULL;

/* The starting line number of the input script statement that we're
 * currently parsing. This may be different than yylineno if bison had
 * to look ahead and lexically scan a token on the following line to
 * decide that the current statement is done.
 */
static int current_script_line = -1;

/*
 * We use this object to look up configuration info needed during
 * parsing.
 */
static PacketDrillConfig *in_config = NULL;

/* The output of the parser: an output script containing
 * 1) a linked list of options
 * 2) a linked list of events
 */
static PacketDrillScript *out_script = NULL;


/* The test invocation to pass back to parse_and_finalize_config(). */
struct invocation *invocation;

/* This standard callback is invoked by flex when it encounters
 * the end of a file. We return 1 to tell flex to return EOF.
 */
int yywrap(void)
{
    return 1;
}


/* The public entry point for the script parser. Parses the
 * text script file with the given path name and fills in the script
 * object with the parsed representation.
 */
int parse_script(PacketDrillConfig *config, PacketDrillScript *script, struct invocation *callback_invocation){
    /* This bison-generated parser is not multi-thread safe, so we
     * have a lock to prevent more than one thread using the
     * parser at the same time. This is useful in the wire server
     * context, where in general we may have more than one test
     * thread running at the same time.
     */

#if YYDEBUG
    yydebug = 1;
#endif

    /* Now parse the script from our buffer. */
    yyin = fopen(script->getScriptPath(), "r");
    if (!yyin)
        printf("fopen: parse error opening script buffer");
    current_script_path = config->getScriptPath();
    in_config = config;
    out_script = script;
    invocation = callback_invocation;

    /* We have to reset the line number here since the wire server
     * can do more than one yyparse().
     */
    yylineno = 1;
    int result = yyparse(); /* invoke bison-generated parser */
    current_script_path = NULL;
    if (fclose(yyin))
        printf("fclose: error closing script buffer");

    /* Unlock parser. */

    return result ? -1 : 0;
}

void parse_and_finalize_config(struct invocation *invocation)
{
    invocation->config->parseScriptOptions(invocation->script->getOptionList());
}

/* Bison emits code to call this method when there's a parse-time error.
 * We print the line number and the error message.
 */
static void yyerror(const char *message) {
    fprintf(stderr, "%s:%d: parse error at '%s': %s\n",
        current_script_path, yylineno, yytext, message);
}


/* Create and initalize a new integer expression with the given
 * literal value and format string.
 */
static PacketDrillExpression *new_integer_expression(int64 num, const char *format) {
    PacketDrillExpression *expression = new PacketDrillExpression(EXPR_INTEGER);
    expression->setNum(num);
    expression->setFormat(format);
    return expression;
}


/* Create and initialize a new option. */
/*static struct option_list *new_option(char *name, char *value)
{
    return NULL;
}*/


#line 271 "parser.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "parser.h".  */
#ifndef YY_YY_PARSER_H_INCLUDED
# define YY_YY_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ELLIPSIS = 258,
    UDP = 259,
    ACK = 260,
    WIN = 261,
    WSCALE = 262,
    MSS = 263,
    NOP = 264,
    TIMESTAMP = 265,
    ECR = 266,
    EOL = 267,
    TCPSACK = 268,
    VAL = 269,
    SACKOK = 270,
    OPTION = 271,
    CHUNK = 272,
    MYDATA = 273,
    MYINIT = 274,
    MYINIT_ACK = 275,
    MYHEARTBEAT = 276,
    MYHEARTBEAT_ACK = 277,
    MYABORT = 278,
    MYSHUTDOWN = 279,
    MYSHUTDOWN_ACK = 280,
    MYERROR = 281,
    MYCOOKIE_ECHO = 282,
    MYCOOKIE_ACK = 283,
    MYSHUTDOWN_COMPLETE = 284,
    HEARTBEAT_INFORMATION = 285,
    CAUSE_INFO = 286,
    MYSACK = 287,
    STATE_COOKIE = 288,
    PARAMETER = 289,
    MYSCTP = 290,
    TYPE = 291,
    FLAGS = 292,
    LEN = 293,
    MYSUPPORTED_EXTENSIONS = 294,
    TYPES = 295,
    TAG = 296,
    A_RWND = 297,
    OS = 298,
    IS = 299,
    TSN = 300,
    MYSID = 301,
    SSN = 302,
    PPID = 303,
    CUM_TSN = 304,
    GAPS = 305,
    DUPS = 306,
    SRTO_ASSOC_ID = 307,
    SRTO_INITIAL = 308,
    SRTO_MAX = 309,
    SRTO_MIN = 310,
    SINIT_NUM_OSTREAMS = 311,
    SINIT_MAX_INSTREAMS = 312,
    SINIT_MAX_ATTEMPTS = 313,
    SINIT_MAX_INIT_TIMEO = 314,
    MYSACK_DELAY = 315,
    SACK_FREQ = 316,
    ASSOC_VALUE = 317,
    ASSOC_ID = 318,
    SACK_ASSOC_ID = 319,
    MYFLOAT = 320,
    INTEGER = 321,
    HEX_INTEGER = 322,
    MYWORD = 323,
    MYSTRING = 324
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 211 "parser.y" /* yacc.c:355  */

    int64 integer;
    double floating;
    char *string;
    char *reserved;
    int64 time_usecs;
    enum direction_t direction;
    uint16 port;
    int32 window;
    uint32 sequence_number;
    struct {
        int protocol;    /* IPPROTO_TCP or IPPROTO_UDP */
        uint32 start_sequence;
        uint16 payload_bytes;
    } tcp_sequence_info;
    PacketDrillEvent *event;
    PacketDrillPacket *packet;
    struct syscall_spec *syscall;
    PacketDrillStruct *sack_block;
    PacketDrillExpression *expression;
    cQueue *expression_list;
    PacketDrillTcpOption *tcp_option;
    PacketDrillSctpParameter *sctp_parameter;
    PacketDrillOption *option;
    cQueue *tcp_options;
    struct errno_spec *errno_info;
    cQueue *sctp_chunk_list;
    cQueue *sctp_parameter_list;
    cQueue *sack_block_list;
    PacketDrillBytes *byte_list;
    uint8 byte;
    PacketDrillSctpChunk *sctp_chunk;

#line 415 "parser.cc" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE yylval;
extern YYLTYPE yylloc;
int yyparse (void);

#endif /* !YY_YY_PARSER_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 446 "parser.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   546

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  88
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  100
/* YYNRULES -- Number of rules.  */
#define YYNRULES  229
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  505

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   324

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      74,    75,    72,    71,    80,    84,    83,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    76,    77,
      81,    70,    82,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    78,     2,    79,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    86,    85,    87,    73,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   311,   311,   317,   319,   326,   330,   337,   342,   346,
     347,   348,   353,   357,   364,   394,   400,   406,   411,   418,
     428,   434,   443,   446,   453,   456,   459,   465,   491,   510,
     526,   528,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   550,   551,   557,   566,   567,   576,
     577,   578,   582,   583,   588,   589,   594,   600,   609,   615,
     621,   624,   627,   630,   633,   636,   639,   642,   645,   648,
     651,   654,   660,   661,   667,   673,   718,   719,   725,   731,
     755,   756,   762,   768,   793,   794,   803,   804,   813,   814,
     823,   824,   833,   834,   843,   844,   853,   854,   864,   865,
     871,   880,   881,   890,   891,   892,   897,   898,   899,   904,
     913,   918,   923,   928,   934,   940,   945,   950,   955,   971,
     976,   981,   982,   986,   990,   998,   999,  1000,  1005,  1008,
    1024,  1027,  1032,  1035,  1038,  1048,  1056,  1060,  1067,  1070,
    1073,  1080,  1086,  1106,  1109,  1118,  1121,  1130,  1133,  1136,
    1143,  1147,  1155,  1158,  1161,  1168,  1175,  1178,  1182,  1199,
    1203,  1209,  1210,  1214,  1220,  1232,  1233,  1237,  1243,  1255,
    1274,  1286,  1289,  1295,  1302,  1305,  1311,  1315,  1322,  1325,
    1327,  1330,  1334,  1339,  1344,  1347,  1350,  1353,  1356,  1359,
    1367,  1373,  1379,  1390,  1394,  1401,  1407,  1413,  1416,  1420,
    1423,  1427,  1430,  1434,  1438,  1447,  1459,  1465,  1469,  1475,
    1479,  1485,  1489,  1495,  1499,  1512,  1519,  1529,  1535,  1540,
    1546,  1549,  1557,  1568,  1571,  1579,  1582,  1588,  1594,  1597
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ELLIPSIS", "UDP", "ACK", "WIN",
  "WSCALE", "MSS", "NOP", "TIMESTAMP", "ECR", "EOL", "TCPSACK", "VAL",
  "SACKOK", "OPTION", "CHUNK", "MYDATA", "MYINIT", "MYINIT_ACK",
  "MYHEARTBEAT", "MYHEARTBEAT_ACK", "MYABORT", "MYSHUTDOWN",
  "MYSHUTDOWN_ACK", "MYERROR", "MYCOOKIE_ECHO", "MYCOOKIE_ACK",
  "MYSHUTDOWN_COMPLETE", "HEARTBEAT_INFORMATION", "CAUSE_INFO", "MYSACK",
  "STATE_COOKIE", "PARAMETER", "MYSCTP", "TYPE", "FLAGS", "LEN",
  "MYSUPPORTED_EXTENSIONS", "TYPES", "TAG", "A_RWND", "OS", "IS", "TSN",
  "MYSID", "SSN", "PPID", "CUM_TSN", "GAPS", "DUPS", "SRTO_ASSOC_ID",
  "SRTO_INITIAL", "SRTO_MAX", "SRTO_MIN", "SINIT_NUM_OSTREAMS",
  "SINIT_MAX_INSTREAMS", "SINIT_MAX_ATTEMPTS", "SINIT_MAX_INIT_TIMEO",
  "MYSACK_DELAY", "SACK_FREQ", "ASSOC_VALUE", "ASSOC_ID", "SACK_ASSOC_ID",
  "MYFLOAT", "INTEGER", "HEX_INTEGER", "MYWORD", "MYSTRING", "'='", "'+'",
  "'*'", "'~'", "'('", "')'", "':'", "';'", "'['", "']'", "','", "'<'",
  "'>'", "'.'", "'-'", "'|'", "'{'", "'}'", "$accept", "script",
  "opt_options", "options", "option", "option_flag", "option_value",
  "events", "event", "event_time", "time", "action", "packet_spec",
  "tcp_packet_spec", "udp_packet_spec", "sctp_packet_spec",
  "sctp_chunk_list", "sctp_chunk", "opt_flags", "opt_len", "opt_val",
  "byte_list", "chunk_types_list", "byte", "chunk_type", "opt_data_flags",
  "opt_abort_flags", "opt_shutdown_complete_flags", "opt_tag",
  "opt_a_rwnd", "opt_os", "opt_is", "opt_tsn", "opt_sid", "opt_ssn",
  "opt_ppid", "opt_cum_tsn", "opt_gaps", "opt_dups",
  "sctp_data_chunk_spec", "sctp_init_chunk_spec",
  "sctp_init_ack_chunk_spec", "sctp_sack_chunk_spec",
  "sctp_heartbeat_chunk_spec", "sctp_heartbeat_ack_chunk_spec",
  "sctp_abort_chunk_spec", "sctp_shutdown_chunk_spec",
  "sctp_shutdown_ack_chunk_spec", "sctp_cookie_echo_chunk_spec",
  "sctp_cookie_ack_chunk_spec", "sctp_shutdown_complete_chunk_spec",
  "opt_parameter_list", "sctp_parameter_list", "sctp_parameter",
  "sctp_heartbeat_information_parameter",
  "sctp_supported_extensions_parameter", "sctp_state_cookie_parameter",
  "packet_prefix", "direction", "flags", "seq", "opt_ack", "opt_window",
  "opt_tcp_options", "tcp_option_list", "tcp_option", "sack_block_list",
  "gap_list", "gap", "dup_list", "dup", "sack_block", "syscall_spec",
  "opt_end_time", "function_name", "function_arguments", "expression_list",
  "expression", "decimal_integer", "hex_integer", "binary_expression",
  "array", "srto_initial", "srto_max", "srto_min", "sctp_assoc_id",
  "sctp_rtoinfo", "sinit_num_ostreams", "sinit_max_instreams",
  "sinit_max_attempts", "sinit_max_init_timeo", "sctp_initmsg",
  "sctp_assoc_value", "sack_delay", "sack_freq", "sctp_sackinfo",
  "opt_errno", "opt_note", "note", "word_list", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      61,    43,    42,   126,    40,    41,    58,    59,    91,    93,
      44,    60,    62,    46,    45,   124,   123,   125
};
# endif

#define YYPACT_NINF -188

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-188)))

#define YYTABLE_NINF -1

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      -8,  -188,   161,   -35,    -8,  -188,   104,  -188,  -188,  -188,
     -45,  -188,   -35,  -188,     2,   105,  -188,   -27,   111,  -188,
     -45,  -188,  -188,  -188,  -188,  -188,  -188,  -188,    12,  -188,
    -188,   136,   -45,  -188,  -188,  -188,  -188,   141,  -188,   124,
     131,   134,  -188,  -188,   168,  -188,   162,  -188,   -45,   169,
     130,  -188,   163,   232,    -1,   170,  -188,   166,   160,   164,
     165,   167,   171,   172,   173,   174,   175,   176,   177,   178,
     180,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,   181,   182,   238,  -188,  -188,  -188,
    -188,   243,  -188,     3,   123,   -57,   179,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,    24,  -188,   221,   222,   222,
     222,   222,   223,   222,   222,   222,   222,   224,   222,   130,
     188,  -188,   197,   184,  -188,  -188,    66,   196,   198,   199,
     200,   201,   202,   203,   187,   194,   195,  -188,    24,    24,
     -53,   206,   204,   207,   205,   208,   209,   210,   211,   212,
     213,   215,   216,   218,   217,   219,   220,  -188,   214,  -188,
     193,  -188,  -188,     7,    10,    22,    35,    24,     7,     7,
     225,   226,   231,   179,   179,   227,   227,    32,   240,    45,
     241,   241,   256,   256,    37,  -188,   246,  -188,   240,  -188,
      40,  -188,   246,   228,   229,   233,   236,  -188,   290,  -188,
     239,  -188,   -56,  -188,  -188,  -188,  -188,   230,  -188,  -188,
    -188,  -188,  -188,  -188,   -34,   234,   235,   237,   242,   247,
     244,   248,   245,   251,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,   250,   249,  -188,  -188,  -188,   253,   254,   255,   252,
     257,   258,  -188,  -188,  -188,  -188,   261,   259,   260,  -188,
    -188,  -188,  -188,   262,  -188,  -188,  -188,  -188,   267,   263,
     239,  -188,   157,  -188,   268,  -188,   264,   265,    43,   272,
      51,   270,    52,  -188,  -188,    88,    53,   271,    54,   266,
     266,     6,  -188,  -188,    55,  -188,   292,   266,   298,   275,
    -188,  -188,   269,   273,   274,  -188,  -188,   276,   277,  -188,
    -188,   278,   279,  -188,  -188,  -188,  -188,  -188,  -188,   280,
     281,  -188,  -188,   282,   283,   285,   287,   288,  -188,  -188,
     286,   291,   289,   294,  -188,   225,    24,   231,    56,  -188,
      57,   296,    58,   299,    60,   301,   301,  -188,   292,     0,
    -188,   297,  -188,   293,   112,   284,  -188,  -188,  -188,  -188,
     302,   295,  -188,  -188,   304,   300,  -188,  -188,   305,   303,
     306,   308,  -188,    47,   307,   309,   272,  -188,  -188,    61,
    -188,    94,   310,   122,   314,   314,  -188,   311,  -188,  -188,
     110,  -188,     1,   316,   312,  -188,  -188,  -188,  -188,   315,
     313,  -188,  -188,   318,   317,   320,  -188,  -188,   153,  -188,
     125,   321,   319,  -188,   126,   328,   127,   271,   271,  -188,
     322,   326,   143,  -188,     8,  -188,  -188,  -188,   324,   325,
    -188,  -188,   323,   323,  -188,   329,  -188,   330,  -188,   128,
      49,  -188,   138,   327,   331,  -188,  -188,   332,   333,   145,
    -188,  -188,  -188,  -188,  -188,   334,   335,   336,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,   339,  -188,   341,    11,   338,
     -11,  -188,  -188,   340,   344,   345,  -188,  -188,   129,     9,
     337,   342,   346,   115,   348,   365,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,   147,  -188,   350,   351,   347,   115,   378,   381,  -188,
    -188,   349,   352,  -188,  -188
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       3,     8,     0,     0,     4,     5,     0,     1,    20,    21,
       0,    17,     2,    12,   171,    16,     6,     0,    15,    13,
       0,   136,   137,    14,    22,    24,    25,    26,     0,   135,
      23,     0,     0,     9,    10,    11,     7,     0,   172,     0,
       0,   138,   139,   141,     0,   173,     0,    18,     0,     0,
       0,   140,     0,   143,     0,     0,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    30,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,   145,   178,   190,   191,
     181,   182,   174,     0,     0,     0,   176,   179,   180,   184,
     185,   188,   186,   187,   189,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   144,     0,   147,   183,   193,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   175,     0,     0,
     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,   146,
       0,    27,   194,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   177,   192,     0,   225,     0,     0,     0,
       0,     0,     0,     0,     0,   115,     0,   117,     0,   119,
       0,   120,     0,     0,     0,     0,     0,   152,     0,   153,
       0,   156,     0,   150,   203,   201,   202,     0,   196,   195,
     207,   206,   218,   217,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   224,   170,   226,    72,    74,    73,
      75,     0,     0,    44,    46,    45,     0,     0,     0,     0,
       0,     0,    76,    78,    77,    79,     0,     0,     0,    80,
      82,    81,    83,     0,   142,   149,   155,   154,     0,     0,
     157,   159,     0,   148,     0,   216,     0,     0,     0,     0,
       0,     0,     0,   222,   228,     0,     0,     0,     0,     0,
       0,     0,   113,   114,     0,   116,     0,     0,     0,     0,
     160,   151,     0,     0,     0,   198,   197,     0,     0,   209,
     208,     0,     0,   220,   219,   229,   227,    47,    48,     0,
       0,    84,    85,     0,     0,     0,     0,     0,   101,   102,
       0,     0,     0,     0,   169,     0,     0,     0,     0,   205,
       0,     0,     0,     0,     0,     0,     0,   128,     0,     0,
     118,     0,   158,     0,     0,     0,   200,   199,   211,   210,
       0,     0,    92,    93,     0,     0,    86,    87,     0,     0,
       0,     0,    49,     0,     0,     0,     0,   215,   221,     0,
     214,     0,     0,     0,     0,     0,   129,     0,    57,    56,
       0,    52,     0,     0,     0,   213,   212,    94,    95,     0,
       0,    88,    89,     0,     0,     0,    50,    51,     0,   103,
     161,     0,     0,   204,     0,     0,     0,     0,     0,    53,
       0,     0,     0,   162,     0,   112,    96,    97,     0,     0,
      90,    91,     0,     0,   104,     0,   105,     0,   106,   165,
       0,   109,     0,     0,     0,   164,   163,     0,     0,     0,
     166,    98,    99,   100,   121,     0,     0,   122,   123,   125,
     127,   126,   110,   111,   107,     0,   108,     0,     0,     0,
       0,   168,   167,     0,     0,     0,   124,   132,     0,     0,
       0,     0,     0,     0,     0,     0,   130,    60,    61,    62,
      64,    65,    66,    67,    68,    69,    70,    71,    63,    59,
      58,     0,    54,     0,     0,     0,     0,     0,     0,   131,
      55,     0,     0,   133,   134
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -188,  -188,  -188,  -188,   388,  -188,  -188,  -188,   396,  -188,
      -3,  -188,  -188,  -188,  -188,  -188,  -188,   343,   100,  -187,
     -26,  -188,  -188,   -85,  -145,  -188,  -188,  -188,   353,  -107,
      17,    59,  -179,  -188,  -188,  -188,   354,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,    -5,  -188,   -37,    48,  -188,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,   183,  -188,  -188,     5,  -188,
     -33,   186,  -188,  -188,  -188,  -188,   355,  -105,  -188,  -188,
    -188,  -188,   185,   102,    63,    64,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,   189,   103,  -188,  -188,  -188,   356,  -188
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,     4,     5,     6,    36,    12,    13,    14,
      15,    23,    24,    25,    26,    27,    70,    71,   144,   232,
     321,   380,   491,   381,   492,   142,   149,   155,   237,   314,
     359,   394,   310,   355,   390,   419,   247,   365,   402,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,   433,   447,   448,   449,   450,   451,    28,    29,    44,
      53,    86,   123,   161,   202,   203,   260,   412,   413,   439,
     440,   261,    30,    31,    46,    55,    95,    96,    97,    98,
      99,   100,   134,   218,   298,   207,   101,   135,   220,   302,
     351,   102,   103,   136,   222,   104,   176,   225,   224,   275
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_uint16 yytable[] =
{
     140,   248,    87,   362,   399,    20,    87,    18,     1,   316,
     204,   428,   472,   208,   463,   175,    39,    38,   137,   239,
       8,     9,   445,   138,   262,   210,   263,    87,   446,    47,
       8,     9,   139,   173,   174,   227,    10,    11,   212,    33,
     242,    34,    35,   249,   231,    56,   295,    40,   233,   464,
     377,   139,   441,   265,   299,   303,   307,   311,   318,   346,
     348,   352,   214,   356,   385,    88,    89,    90,    91,    88,
      89,    90,    91,   205,    92,   206,   209,    93,   363,   400,
      41,    93,   125,    21,    22,    94,   429,   473,   211,    94,
      88,    89,    90,    91,   317,    42,    43,   387,   228,   229,
     230,   213,    93,   243,   244,   245,   250,   251,   252,   296,
      94,   234,   235,   378,   379,   442,   443,   300,   304,   308,
     312,   319,   347,   349,   353,   391,   357,   386,   410,   416,
     420,   437,   470,   477,   478,   479,   480,   481,   482,   483,
     484,   444,   485,   486,   487,   162,   138,   488,    58,    59,
      60,    61,    62,    63,    64,    65,   305,    66,    67,    68,
     388,     7,    69,   306,   195,   196,   197,   198,   239,   199,
     200,   445,   201,   315,    17,   127,   128,   446,    32,   129,
     322,   489,   490,   130,    37,   131,   132,   133,   392,   397,
     398,   411,   417,   421,   438,   471,   194,   139,    49,   367,
     195,   196,   197,   198,    45,   199,   200,    50,   201,   145,
     146,   147,    48,   150,   151,   152,   153,    51,   156,   378,
     379,   344,   426,   427,   456,   457,   495,   496,   422,   423,
     240,   241,   215,   216,    52,    57,    54,    85,   107,    84,
     105,   106,   108,   109,   122,   110,   124,   120,   121,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   141,   143,
     148,   154,   158,   159,   139,   160,   163,   170,   164,   165,
     166,   167,   168,   169,   171,   172,   177,   179,   231,   217,
     193,   184,   236,   219,   178,   180,   239,   190,   181,   182,
     183,   185,   221,   186,   187,   246,   188,   189,   191,   256,
     192,   223,   257,   254,   258,   259,   320,   268,   313,   323,
     264,   255,   361,   409,   266,   267,   309,   270,   272,   274,
     276,   128,   269,   278,   271,   130,   293,   297,   301,   277,
     281,   284,   273,   288,   279,   280,   282,   283,   285,   289,
     286,   324,   287,   326,   358,   354,   328,   364,   330,   325,
     332,   500,   334,   360,   327,   350,   339,   389,   393,   331,
     342,   333,   493,   335,   329,   336,   337,   401,   338,   341,
     340,   368,   369,   366,   371,   373,   418,   382,   465,   494,
     372,   501,   370,   374,   502,   404,   375,   376,   406,   383,
     396,   414,    16,   405,   430,   435,   411,   407,   415,   403,
     408,   424,   425,   432,   431,   461,   452,   438,    19,   455,
     453,   454,   458,   459,   468,   469,   460,   474,   434,   467,
     497,   498,   475,   466,   462,   476,   499,   343,   503,   384,
     345,   504,   436,     0,   395,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   291,   290,     0,   126,   292,
       0,     0,     0,     0,     0,     0,   294,     0,     0,     0,
       0,     0,   157,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   226,     0,   238,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   253
};

static const yytype_int16 yycheck[] =
{
     105,   188,     3,     3,     3,     3,     3,    10,    16,     3,
       3,     3,     3,     3,     3,    68,     4,    20,    75,    30,
      65,    66,    33,    80,    80,     3,    82,     3,    39,    32,
      65,    66,    85,   138,   139,     3,    71,    72,     3,    66,
       3,    68,    69,     3,    38,    48,     3,    35,     3,    38,
       3,    85,     3,    87,     3,     3,     3,     3,     3,     3,
       3,     3,   167,     3,     3,    66,    67,    68,    69,    66,
      67,    68,    69,    66,    75,    68,    66,    78,    78,    78,
      68,    78,    79,    81,    82,    86,    78,    78,    66,    86,
      66,    67,    68,    69,   281,    83,    84,     3,    66,    67,
      68,    66,    78,    66,    67,    68,    66,    67,    68,    66,
      86,    66,    67,    66,    67,    66,    67,    66,    66,    66,
      66,    66,    66,    66,    66,     3,    66,    66,     3,     3,
       3,     3,     3,    18,    19,    20,    21,    22,    23,    24,
      25,     3,    27,    28,    29,    79,    80,    32,    18,    19,
      20,    21,    22,    23,    24,    25,    68,    27,    28,    29,
      66,     0,    32,    75,     7,     8,     9,    10,    30,    12,
      13,    33,    15,   280,    70,    52,    53,    39,    73,    56,
     287,    66,    67,    60,    73,    62,    63,    64,    66,    79,
      80,    66,    66,    66,    66,    66,     3,    85,    74,    87,
       7,     8,     9,    10,    68,    12,    13,    76,    15,   109,
     110,   111,    71,   113,   114,   115,   116,    83,   118,    66,
      67,   326,    79,    80,    79,    80,    79,    80,   407,   408,
     182,   183,   168,   169,    66,    66,    74,     5,    78,    76,
      70,    75,    78,    78,     6,    78,     3,    66,    66,    78,
      78,    78,    78,    78,    78,    78,    78,    77,    37,    37,
      37,    37,    74,    66,    85,    81,    70,    80,    70,    70,
      70,    70,    70,    70,    80,    80,    70,    70,    38,    54,
      66,    70,    41,    57,    80,    80,    30,    70,    80,    80,
      80,    79,    61,    80,    79,    49,    80,    79,    79,    66,
      80,    74,    66,    75,    14,    66,    14,    70,    42,    11,
      80,    82,   338,   398,    80,    80,    45,    70,    70,    68,
      70,    53,    80,    70,    80,    60,    62,    55,    58,    80,
      78,    70,    87,    66,    80,    80,    79,    79,    79,    76,
      80,    66,    80,    70,    43,    46,    70,    50,    70,    80,
      70,   496,    70,   336,    80,    59,    70,    47,    44,    80,
      66,    80,    14,    80,    87,    80,    79,    51,    80,    80,
      79,    87,    70,    80,    70,    70,    48,    70,    40,    14,
      80,     3,    87,    80,     3,    70,    80,    79,    70,    80,
      79,    70,     4,    80,    70,    66,    66,    80,    79,    87,
      80,    79,    76,    80,    79,    66,    79,    66,    12,    76,
      79,    79,    78,    78,    70,    70,    80,    80,   423,    79,
      70,    70,    80,   460,   457,    79,    79,   325,    79,   366,
     327,    79,   427,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   262,   260,    -1,    93,   264,
      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    16,    89,    90,    91,    92,    93,     0,    65,    66,
      71,    72,    95,    96,    97,    98,    92,    70,    98,    96,
       3,    81,    82,    99,   100,   101,   102,   103,   145,   146,
     160,   161,    73,    66,    68,    69,    94,    73,    98,     4,
      35,    68,    83,    84,   147,    68,   162,    98,    71,    74,
      76,    83,    66,   148,    74,   163,    98,    66,    18,    19,
      20,    21,    22,    23,    24,    25,    27,    28,    29,    32,
     104,   105,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,    76,     5,   149,     3,    66,    67,
      68,    69,    75,    78,    86,   164,   165,   166,   167,   168,
     169,   174,   179,   180,   183,    70,    75,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    77,
      66,    66,     6,   150,     3,    79,   164,    52,    53,    56,
      60,    62,    63,    64,   170,   175,   181,    75,    80,    85,
     165,    37,   113,    37,   106,   106,   106,   106,    37,   114,
     106,   106,   106,   106,    37,   115,   106,   105,    74,    66,
      81,   151,    79,    70,    70,    70,    70,    70,    70,    70,
      80,    80,    80,   165,   165,    68,   184,    70,    80,    70,
      80,    80,    80,    80,    70,    79,    80,    79,    80,    79,
      70,    79,    80,    66,     3,     7,     8,     9,    10,    12,
      13,    15,   152,   153,     3,    66,    68,   173,     3,    66,
       3,    66,     3,    66,   165,   173,   173,    54,   171,    57,
     176,    61,   182,    74,   186,   185,   186,     3,    66,    67,
      68,    38,   107,     3,    66,    67,    41,   116,   116,    30,
     142,   142,     3,    66,    67,    68,    49,   124,   107,     3,
      66,    67,    68,   124,    75,    82,    66,    66,    14,    66,
     154,   159,    80,    82,    80,    87,    80,    80,    70,    80,
      70,    80,    70,    87,    68,   187,    70,    80,    70,    80,
      80,    78,    79,    79,    70,    79,    80,    80,    66,    76,
     159,   153,   170,    62,   181,     3,    66,    55,   172,     3,
      66,    58,   177,     3,    66,    68,    75,     3,    66,    45,
     120,     3,    66,    42,   117,   117,     3,   107,     3,    66,
      14,   108,   117,    11,    66,    80,    70,    80,    70,    87,
      70,    80,    70,    80,    70,    80,    80,    79,    80,    70,
      79,    80,    66,   171,   165,   182,     3,    66,     3,    66,
      59,   178,     3,    66,    46,   121,     3,    66,    43,   118,
     118,   108,     3,    78,    50,   125,    80,    87,    87,    70,
      87,    70,    80,    70,    80,    80,    79,     3,    66,    67,
     109,   111,    70,    80,   172,     3,    66,     3,    66,    47,
     122,     3,    66,    44,   119,   119,    79,    79,    80,     3,
      78,    51,   126,    87,    70,    80,    70,    80,    80,   111,
       3,    66,   155,   156,    70,    79,     3,    66,    48,   123,
       3,    66,   120,   120,    79,    76,    79,    80,     3,    78,
      70,    79,    80,   139,   139,    66,   156,     3,    66,   157,
     158,     3,    66,    67,     3,    33,    39,   140,   141,   142,
     143,   144,    79,    79,    79,    76,    79,    80,    78,    78,
      80,    66,   158,     3,    38,    40,   141,    79,    70,    70,
       3,    66,     3,    78,    80,    80,    79,    18,    19,    20,
      21,    22,    23,    24,    25,    27,    28,    29,    32,    66,
      67,   110,   112,    14,    14,    79,    80,    70,    70,    79,
     112,     3,     3,    79,    79
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    88,    89,    90,    90,    91,    91,    92,    93,    94,
      94,    94,    95,    95,    96,    97,    97,    97,    97,    97,
      98,    98,    99,    99,   100,   100,   100,   101,   102,   103,
     104,   104,   105,   105,   105,   105,   105,   105,   105,   105,
     105,   105,   105,   105,   106,   106,   106,   107,   107,   108,
     108,   108,   109,   109,   110,   110,   111,   111,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   113,   113,   113,   113,   114,   114,   114,   114,
     115,   115,   115,   115,   116,   116,   117,   117,   118,   118,
     119,   119,   120,   120,   121,   121,   122,   122,   123,   123,
     123,   124,   124,   125,   125,   125,   126,   126,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   139,   140,   140,   141,   141,   141,   142,   142,
     143,   143,   144,   144,   144,   145,   146,   146,   147,   147,
     147,   147,   148,   149,   149,   150,   150,   151,   151,   151,
     152,   152,   153,   153,   153,   153,   153,   153,   153,   154,
     154,   155,   155,   155,   156,   157,   157,   157,   158,   159,
     160,   161,   161,   162,   163,   163,   164,   164,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     166,   167,   168,   169,   169,   170,   170,   171,   171,   172,
     172,   173,   173,   173,   174,   174,   175,   175,   176,   176,
     177,   177,   178,   178,   179,   180,   180,   181,   181,   182,
     182,   183,   183,   184,   184,   185,   185,   186,   187,   187
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     0,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     3,     5,
       1,     1,     1,     1,     1,     1,     1,     6,     5,     4,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     1,     3,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     5,     3,     5,     5,    14,
      15,    15,    12,     6,     6,     4,     6,     4,     8,     4,
       4,     2,     2,     1,     3,     1,     1,     1,     4,     6,
       6,     8,     4,    10,    10,     1,     1,     1,     1,     1,
       2,     1,     6,     0,     2,     0,     2,     0,     3,     3,
       1,     3,     1,     1,     2,     2,     1,     2,     5,     1,
       2,     0,     1,     3,     3,     0,     1,     3,     3,     3,
       7,     0,     2,     1,     2,     3,     1,     3,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,    11,     7,     3,     3,     3,     3,
       3,     3,     3,     3,     9,     9,     5,     3,     3,     3,
       3,     9,     5,     0,     2,     0,     1,     3,     1,     2
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 311 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;    /* The parser output is in out_script */
}
#line 2005 "parser.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 317 "parser.y" /* yacc.c:1646  */
    { (yyval.option) = NULL;
    parse_and_finalize_config(invocation);}
#line 2012 "parser.cc" /* yacc.c:1646  */
    break;

  case 4:
#line 319 "parser.y" /* yacc.c:1646  */
    {
    (yyval.option) = (yyvsp[0].option);
    parse_and_finalize_config(invocation);
}
#line 2021 "parser.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 326 "parser.y" /* yacc.c:1646  */
    {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2030 "parser.cc" /* yacc.c:1646  */
    break;

  case 6:
#line 330 "parser.y" /* yacc.c:1646  */
    {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2039 "parser.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 337 "parser.y" /* yacc.c:1646  */
    {
    (yyval.option) = new PacketDrillOption((yyvsp[-2].string), (yyvsp[0].string));
}
#line 2047 "parser.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 342 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].reserved); }
#line 2053 "parser.cc" /* yacc.c:1646  */
    break;

  case 9:
#line 346 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = strdup(yytext); }
#line 2059 "parser.cc" /* yacc.c:1646  */
    break;

  case 10:
#line 347 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 2065 "parser.cc" /* yacc.c:1646  */
    break;

  case 11:
#line 348 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 2071 "parser.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 353 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));    /* save pointer to event list as output of parser */
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2080 "parser.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 357 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2089 "parser.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 364 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = (yyvsp[0].event);
    (yyval.event)->setLineNumber((yyvsp[-1].event)->getLineNumber());    /* use timestamp's line */
    (yyval.event)->setEventTime((yyvsp[-1].event)->getEventTime());
    (yyval.event)->setEventTimeEnd((yyvsp[-1].event)->getEventTimeEnd());
    (yyval.event)->setTimeType((yyvsp[-1].event)->getTimeType());
    (yyvsp[-1].event)->getLineNumber(),
    (yyvsp[-1].event)->getEventTime().dbl(),
    (yyvsp[-1].event)->getEventTimeEnd().dbl(),
    (yyvsp[-1].event)->getTimeType();
    if ((yyval.event)->getEventTimeEnd() != NO_TIME_RANGE) {
        if ((yyval.event)->getEventTimeEnd() < (yyval.event)->getEventTime())
            printf("Semantic error: time range is backwards\n");
    }
    if ((yyval.event)->getTimeType() == ANY_TIME &&  ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        printf("Semantic error: event time <star> can only be used with outbound packets\n");
    } else if (((yyval.event)->getTimeType() == ABSOLUTE_RANGE_TIME ||
        (yyval.event)->getTimeType() == RELATIVE_RANGE_TIME) &&
        ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        printf("Semantic error: event time range can only be used with outbound packets\n");
    }
    delete((yyvsp[-1].event));
}
#line 2121 "parser.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 394 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(RELATIVE_TIME);
}
#line 2132 "parser.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 400 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(ABSOLUTE_TIME);
}
#line 2143 "parser.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 406 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setTimeType(ANY_TIME);
}
#line 2153 "parser.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 411 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-2]).first_line);
    (yyval.event)->setTimeType(ABSOLUTE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-2].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2165 "parser.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 418 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-4]).first_line);
    (yyval.event)->setTimeType(RELATIVE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-3].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2177 "parser.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 428 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].floating) < 0) {
        printf("Semantic error: negative time\n");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].floating) * 1.0e6); /* convert float secs to s64 microseconds */
}
#line 2188 "parser.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 434 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].integer) < 0) {
        printf("Semantic error: negative time\n");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].integer) * 1000000); /* convert int secs to s64 microseconds */
}
#line 2199 "parser.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 443 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(PACKET_EVENT);  (yyval.event)->setPacket((yyvsp[0].packet));
}
#line 2207 "parser.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 446 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(SYSCALL_EVENT);
    (yyval.event)->setSyscall((yyvsp[0].syscall));
}
#line 2216 "parser.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 453 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2224 "parser.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 456 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2232 "parser.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 459 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2240 "parser.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 465 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-5].packet), *inner = NULL;
    enum direction_t direction = outer->getDirection();

    if (((yyvsp[0].tcp_options) == NULL) && (direction != DIRECTION_OUTBOUND)) {
        yylineno = (yylsp[0]).first_line;
        printf("<...> for TCP options can only be used with outbound packets");
    }
    cPacket* pkt = PacketDrill::buildTCPPacket(in_config->getWireProtocol(), direction,
                                               (yyvsp[-4].string),
                                               (yyvsp[-3].tcp_sequence_info).start_sequence, (yyvsp[-3].tcp_sequence_info).payload_bytes,
                                               (yyvsp[-2].sequence_number), (yyvsp[-1].window), (yyvsp[0].tcp_options), &error);

    free((yyvsp[-4].string));

    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);

    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2268 "parser.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 491 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-4].packet), *inner = NULL;

    enum direction_t direction = outer->getDirection();
    cPacket* pkt = PacketDrill::buildUDPPacket(in_config->getWireProtocol(), direction, (yyvsp[-1].integer), &error);
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2289 "parser.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 510 "parser.y" /* yacc.c:1646  */
    {
    PacketDrillPacket *inner = NULL;
    enum direction_t direction = (yyvsp[-3].packet)->getDirection();
    cPacket* pkt = PacketDrill::buildSCTPPacket(in_config->getWireProtocol(), direction, (yyvsp[0].sctp_chunk_list));
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);
    (yyval.packet) = inner;
}
#line 2307 "parser.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 526 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = new cQueue("sctpChunkList");
                                   (yyval.sctp_chunk_list)->insert((cObject*)(yyvsp[0].sctp_chunk)); }
#line 2314 "parser.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 528 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = (yyvsp[-2].sctp_chunk_list);
                                   (yyvsp[-2].sctp_chunk_list)->insert((yyvsp[0].sctp_chunk)); }
#line 2321 "parser.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 534 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2327 "parser.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 535 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2333 "parser.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 536 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2339 "parser.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 537 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2345 "parser.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 538 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2351 "parser.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 539 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2357 "parser.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 540 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2363 "parser.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 541 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2369 "parser.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 542 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2375 "parser.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 543 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2381 "parser.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 544 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2387 "parser.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 545 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2393 "parser.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 550 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2399 "parser.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 551 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2410 "parser.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 557 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2421 "parser.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 566 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2427 "parser.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 567 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: length value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2438 "parser.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 576 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2444 "parser.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 577 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2450 "parser.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 578 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-1].byte_list); }
#line 2456 "parser.cc" /* yacc.c:1646  */
    break;

  case 52:
#line 582 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].byte)); }
#line 2462 "parser.cc" /* yacc.c:1646  */
    break;

  case 53:
#line 583 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].byte)); }
#line 2469 "parser.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 588 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].integer)); printf("new PacketDrillBytes created\n");}
#line 2475 "parser.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 589 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].integer)); }
#line 2482 "parser.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 594 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: byte value out of range\n");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2493 "parser.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 600 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: byte value out of range\n");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2504 "parser.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 609 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: type value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2515 "parser.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 615 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: type value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2526 "parser.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 621 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_DATA_CHUNK_TYPE;
}
#line 2534 "parser.cc" /* yacc.c:1646  */
    break;

  case 61:
#line 624 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_INIT_CHUNK_TYPE;
}
#line 2542 "parser.cc" /* yacc.c:1646  */
    break;

  case 62:
#line 627 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_INIT_ACK_CHUNK_TYPE;
}
#line 2550 "parser.cc" /* yacc.c:1646  */
    break;

  case 63:
#line 630 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SACK_CHUNK_TYPE;
}
#line 2558 "parser.cc" /* yacc.c:1646  */
    break;

  case 64:
#line 633 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_HEARTBEAT_CHUNK_TYPE;
}
#line 2566 "parser.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 636 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_HEARTBEAT_ACK_CHUNK_TYPE;
}
#line 2574 "parser.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 639 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_ABORT_CHUNK_TYPE;
}
#line 2582 "parser.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 642 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_CHUNK_TYPE;
}
#line 2590 "parser.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 645 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_ACK_CHUNK_TYPE;
}
#line 2598 "parser.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 648 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_COOKIE_ECHO_CHUNK_TYPE;
}
#line 2606 "parser.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 651 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_COOKIE_ACK_CHUNK_TYPE;
}
#line 2614 "parser.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 654 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_COMPLETE_CHUNK_TYPE;
}
#line 2622 "parser.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 660 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2628 "parser.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 661 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2639 "parser.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 667 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2650 "parser.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 673 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'I':
            if (flags & SCTP_DATA_CHUNK_I_BIT) {
                printf("Semantic error: I-bit specified multiple times\n");
            } else {
                flags |= SCTP_DATA_CHUNK_I_BIT;
            }
            break;
        case 'U':
            if (flags & SCTP_DATA_CHUNK_U_BIT) {
                printf("Semantic error: U-bit specified multiple times\n");
            } else {
                flags |= SCTP_DATA_CHUNK_U_BIT;
            }
            break;
        case 'B':
            if (flags & SCTP_DATA_CHUNK_B_BIT) {
                printf("Semantic error: B-bit specified multiple times\n");
            } else {
                flags |= SCTP_DATA_CHUNK_B_BIT;
            }
            break;
        case 'E':
            if (flags & SCTP_DATA_CHUNK_E_BIT) {
                printf("Semantic error: E-bit specified multiple times\n");
            } else {
                flags |= SCTP_DATA_CHUNK_E_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting IUBE as flags\n");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2697 "parser.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 718 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2703 "parser.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 719 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2714 "parser.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 725 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2725 "parser.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 731 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_ABORT_CHUNK_T_BIT) {
                printf("Semantic error: T-bit specified multiple times\n");
            } else {
                flags |= SCTP_ABORT_CHUNK_T_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting T as flags\n");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2751 "parser.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 755 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2757 "parser.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 756 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2768 "parser.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 762 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2779 "parser.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 768 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT) {
                printf("Semantic error: T-bit specified multiple times\n");
            } else {
                flags |= SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting T as flags\n");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2805 "parser.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 793 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2811 "parser.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 794 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: tag value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2822 "parser.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 803 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2828 "parser.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 804 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: a_rwnd value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2839 "parser.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 813 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2845 "parser.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 814 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: os value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2856 "parser.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 823 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2862 "parser.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 824 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: is value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2873 "parser.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 833 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2879 "parser.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 834 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: tsn value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2890 "parser.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 843 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2896 "parser.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 844 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sid value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2907 "parser.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 853 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2913 "parser.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 854 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: ssn value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2924 "parser.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 864 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2930 "parser.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 865 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: ppid value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2941 "parser.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 871 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: ppid value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2952 "parser.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 880 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2958 "parser.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 881 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: cum_tsn value out of range\n");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2969 "parser.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 890 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2975 "parser.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 891 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2981 "parser.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 892 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 2987 "parser.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 897 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2993 "parser.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 898 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2999 "parser.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 899 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 3005 "parser.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 904 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-9].integer) != -1) &&
        (!is_valid_u16((yyvsp[-9].integer)) || ((yyvsp[-9].integer) < SCTP_DATA_CHUNK_LENGTH))) {
        printf("Semantic error: length value out of range\n");
    }
    (yyval.sctp_chunk) = PacketDrill::buildDataChunk((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3017 "parser.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 913 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3025 "parser.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 918 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitAckChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3033 "parser.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 923 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildSackChunk((yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].sack_block_list), (yyvsp[-1].sack_block_list));
}
#line 3041 "parser.cc" /* yacc.c:1646  */
    break;

  case 113:
#line 928 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3049 "parser.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 934 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatAckChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3057 "parser.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 940 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildAbortChunk((yyvsp[-1].integer));
}
#line 3065 "parser.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 945 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownChunk((yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3073 "parser.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 950 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownAckChunk((yyvsp[-1].integer));
}
#line 3081 "parser.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 955 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < SCTP_COOKIE_ACK_LENGTH))) {
        printf("Semantic error: length value out of range\n");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != SCTP_COOKIE_ACK_LENGTH + (yyvsp[-1].byte_list)->getListLength())) {
        printf("Semantic error: length value incompatible with val\n");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        printf("Semantic error: length needs to be specified\n");
    }
    (yyval.sctp_chunk) = PacketDrill::buildCookieEchoChunk((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 3100 "parser.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 971 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildCookieAckChunk((yyvsp[-1].integer));
}
#line 3108 "parser.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 976 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownCompleteChunk((yyvsp[-1].integer));
}
#line 3116 "parser.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 981 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = NULL; }
#line 3122 "parser.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 982 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = (yyvsp[0].expression_list); }
#line 3128 "parser.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 986 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("sctp_parameter_list");
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 3137 "parser.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 990 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 3146 "parser.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 998 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 3152 "parser.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 999 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 3158 "parser.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 1000 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 3164 "parser.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 1005 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, -1, NULL);
}
#line 3172 "parser.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 1008 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < 4))) {
        printf("Semantic error: length value out of range\n");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != 4 + (yyvsp[-1].byte_list)->getListLength())) {
        printf("Semantic error: length value incompatible with val\n");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        printf("Semantic error: length needs to be specified\n");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 3191 "parser.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 1024 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, -1, NULL);
}
#line 3199 "parser.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 1027 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, (yyvsp[-2].byte_list)->getListLength(), (yyvsp[-2].byte_list));
}
#line 3207 "parser.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 1032 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 3215 "parser.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 1035 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 3223 "parser.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 1038 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-5].integer) < 4) || !is_valid_u32((yyvsp[-5].integer))) {
        printf("Semantic error: len value out of range\n");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, (yyvsp[-5].integer), NULL);
}
#line 3234 "parser.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 1048 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = new PacketDrillPacket();
    (yyval.packet)->setDirection((yyvsp[0].direction));
}
#line 3243 "parser.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 1056 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_INBOUND;
    current_script_line = yylineno;
}
#line 3252 "parser.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 1060 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_OUTBOUND;
    current_script_line = yylineno;
}
#line 3261 "parser.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 1067 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 3269 "parser.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 1070 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup(".");
}
#line 3277 "parser.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 1073 "parser.y" /* yacc.c:1646  */
    {
printf("parse MYWORD\n");
    asprintf(&((yyval.string)), "%s.", (yyvsp[-1].string));
printf("after parse MYWORD\n");
    free((yyvsp[-1].string));
printf("after free MYWORD\n");
}
#line 3289 "parser.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 1080 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup("");
}
#line 3297 "parser.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 1086 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-5].integer))) {
        printf("TCP start sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[-3].integer))) {
        printf("TCP end sequence number out of range");
    }
    if (!is_valid_u16((yyvsp[-1].integer))) {
        printf("TCP payload size out of range");
    }
    if ((yyvsp[-3].integer) != ((yyvsp[-5].integer) +(yyvsp[-1].integer))) {
        printf("inconsistent TCP sequence numbers and payload size");
    }
    (yyval.tcp_sequence_info).start_sequence = (yyvsp[-5].integer);
    (yyval.tcp_sequence_info).payload_bytes = (yyvsp[-1].integer);
    (yyval.tcp_sequence_info).protocol = IPPROTO_TCP;
}
#line 3319 "parser.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 1106 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sequence_number) = 0;
}
#line 3327 "parser.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 1109 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    printf("TCP ack sequence number out of range");
    }
    (yyval.sequence_number) = (yyvsp[0].integer);
}
#line 3338 "parser.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 1118 "parser.y" /* yacc.c:1646  */
    {
    (yyval.window) = -1;
}
#line 3346 "parser.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 1121 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("TCP window value out of range");
    }
    (yyval.window) = (yyvsp[0].integer);
}
#line 3357 "parser.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 1130 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("opt_tcp_options");
}
#line 3365 "parser.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 1133 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-1].tcp_options);
}
#line 3373 "parser.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 1136 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = NULL; /* FLAG_OPTIONS_NOCHECK */
}
#line 3381 "parser.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1143 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("tcp_option");
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 3390 "parser.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1147 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-2].tcp_options);
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 3399 "parser.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1155 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_NOP, 1);
}
#line 3407 "parser.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1158 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_EOL, 1);
}
#line 3415 "parser.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1161 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_MAXSEG, TCPOLEN_MAXSEG);
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("mss value out of range");
    }
    (yyval.tcp_option)->setMss((yyvsp[0].integer));
}
#line 3427 "parser.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1168 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_WINDOW, TCPOLEN_WINDOW);
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("window scale shift count out of range");
    }
    (yyval.tcp_option)->setWindowScale((yyvsp[0].integer));
}
#line 3439 "parser.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1175 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK_PERMITTED, TCPOLEN_SACK_PERMITTED);
}
#line 3447 "parser.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1178 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK, 2+8*(yyvsp[0].sack_block_list)->getLength());
    (yyval.tcp_option)->setBlockList((yyvsp[0].sack_block_list));
}
#line 3456 "parser.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1182 "parser.y" /* yacc.c:1646  */
    {
    uint32 val, ecr;
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_TIMESTAMP, TCPOLEN_TIMESTAMP);
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("ts val out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("ecr val out of range");
    }
    val = (yyvsp[-2].integer);
    ecr = (yyvsp[0].integer);
    (yyval.tcp_option)->setVal(val);
    (yyval.tcp_option)->setEcr(ecr);
}
#line 3475 "parser.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1199 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("sack_block_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3484 "parser.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1203 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); (yyvsp[-1].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3492 "parser.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1209 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("gap_list");}
#line 3498 "parser.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1210 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("gap_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3507 "parser.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1214 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyvsp[-2].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3515 "parser.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1220 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        printf("Semantic error: start value out of range\n");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: end value out of range\n");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 3529 "parser.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1232 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("dup_list");}
#line 3535 "parser.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1233 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("dup_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3544 "parser.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1237 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyvsp[-2].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3552 "parser.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1243 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        printf("Semantic error: start value out of range\n");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: end value out of range\n");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 3566 "parser.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1255 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("TCP SACK left sequence number out of range\n");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("TCP SACK right sequence number out of range");
    }
    PacketDrillStruct *block = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("TCP SACK left sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("TCP SACK right sequence number out of range");
    }
    (yyval.sack_block) = block;
}
#line 3587 "parser.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 1274 "parser.y" /* yacc.c:1646  */
    {
    (yyval.syscall) = (struct syscall_spec *)calloc(1, sizeof(struct syscall_spec));
    (yyval.syscall)->end_usecs = (yyvsp[-6].time_usecs);
    (yyval.syscall)->name = (yyvsp[-5].string);
    (yyval.syscall)->arguments = (yyvsp[-4].expression_list);
    (yyval.syscall)->result = (yyvsp[-2].expression);
    (yyval.syscall)->error = (yyvsp[-1].errno_info);
    (yyval.syscall)->note = (yyvsp[0].string);
}
#line 3601 "parser.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 1286 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = -1;
}
#line 3609 "parser.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 1289 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = (yyvsp[0].time_usecs);
}
#line 3617 "parser.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 1295 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
    current_script_line = yylineno;
}
#line 3626 "parser.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 1302 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = NULL;
}
#line 3634 "parser.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 1305 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-1].expression_list);
}
#line 3642 "parser.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 1311 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("expressionList");
    (yyval.expression_list)->insert((cObject*)(yyvsp[0].expression));
}
#line 3651 "parser.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 1315 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyvsp[-2].expression_list)->insert((yyvsp[0].expression));
}
#line 3660 "parser.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 1322 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 3668 "parser.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 1325 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression); }
#line 3675 "parser.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 1327 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3683 "parser.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 1330 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 3692 "parser.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 1334 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[0].string));
    (yyval.expression)->setFormat("\"%s\"");
}
#line 3702 "parser.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 1339 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[-1].string));
    (yyval.expression)->setFormat("\"%s\"...");
}
#line 3712 "parser.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 1344 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3720 "parser.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 1347 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3728 "parser.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 1350 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3736 "parser.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 1353 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3744 "parser.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 1356 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3752 "parser.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 1359 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3760 "parser.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 1367 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%ld");
}
#line 3768 "parser.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 1373 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%#lx");
}
#line 3776 "parser.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 1379 "parser.y" /* yacc.c:1646  */
    {    /* bitwise OR */
    (yyval.expression) = new PacketDrillExpression(EXPR_BINARY);
    struct binary_expression *binary = (struct binary_expression *) malloc(sizeof(struct binary_expression));
    binary->op = strdup("|");
    binary->lhs = (yyvsp[-2].expression);
    binary->rhs = (yyvsp[0].expression);
    (yyval.expression)->setBinary(binary);
}
#line 3789 "parser.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 1390 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList(NULL);
}
#line 3798 "parser.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 1394 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList((yyvsp[-1].expression_list));
}
#line 3807 "parser.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 1401 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("srto_initial out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3818 "parser.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 1407 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 3826 "parser.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 1413 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3834 "parser.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 1416 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3840 "parser.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 1420 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3848 "parser.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 1423 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3854 "parser.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 1427 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3862 "parser.cc" /* yacc.c:1646  */
    break;

  case 202:
#line 1430 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 3871 "parser.cc" /* yacc.c:1646  */
    break;

  case 203:
#line 1434 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3877 "parser.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 1438 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = (yyvsp[-7].expression);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 3891 "parser.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 1447 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 3905 "parser.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 1459 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sinit_num_ostreams out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 3916 "parser.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 1465 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3922 "parser.cc" /* yacc.c:1646  */
    break;

  case 208:
#line 1469 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sinit_max_instreams out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 3933 "parser.cc" /* yacc.c:1646  */
    break;

  case 209:
#line 1475 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3939 "parser.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 1479 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sinit_max_attempts out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 3950 "parser.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 1485 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3956 "parser.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 1489 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sinit_max_init_timeo out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 3967 "parser.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 1495 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 3973 "parser.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 1500 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_INITMSG);
    struct sctp_initmsg_expr *initmsg = (struct sctp_initmsg_expr *) malloc(sizeof(struct sctp_initmsg_expr));
    initmsg->sinit_num_ostreams = (yyvsp[-7].expression);
    initmsg->sinit_max_instreams = (yyvsp[-5].expression);
    initmsg->sinit_max_attempts = (yyvsp[-3].expression);
    initmsg->sinit_max_init_timeo = (yyvsp[-1].expression);
    (yyval.expression)->setInitmsg(initmsg);
}
#line 3987 "parser.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 1512 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = (yyvsp[-5].expression);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 3999 "parser.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 1519 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 4011 "parser.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 1529 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: sack_delay out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4022 "parser.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 1535 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 4030 "parser.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 1540 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: sack_freq out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4041 "parser.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 1546 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4047 "parser.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 1549 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = (yyvsp[-5].expression);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 4060 "parser.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 1557 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 4073 "parser.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 1568 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = NULL;
}
#line 4081 "parser.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 1571 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = (struct errno_spec*)malloc(sizeof(struct errno_spec));
    (yyval.errno_info)->errno_macro = (yyvsp[-1].string);
    (yyval.errno_info)->strerror = (yyvsp[0].string);
}
#line 4091 "parser.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 1579 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;
}
#line 4099 "parser.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 1582 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 4107 "parser.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 1588 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[-1].string);
}
#line 4115 "parser.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 1594 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 4123 "parser.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 1597 "parser.y" /* yacc.c:1646  */
    {
    asprintf(&((yyval.string)), "%s %s", (yyvsp[-1].string), (yyvsp[0].string));
    free((yyvsp[-1].string));
    free((yyvsp[0].string));
}
#line 4133 "parser.cc" /* yacc.c:1646  */
    break;


#line 4137 "parser.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
